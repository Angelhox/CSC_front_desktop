/* eslint-disable @typescript-eslint/no-explicit-any */
import { Content, TDocumentDefinitions } from 'pdfmake/interfaces'
import { Order, styles } from './helpers'
import pdfMake from 'pdfmake/build/pdfmake'
import pdfFonts from 'pdfmake/build/vfs_fonts'
import { flagLogo } from './data'
export const separateCamelCase = (cadena: string): string => {
  return cadena
    .replace(/([a-z])([A-Z])/g, '$1 $2') // Inserta un espacio antes de cada mayúscula que sigue a una minúscula
    .replace(/([A-Z])([A-Z][a-z])/g, '$1 $2') // Asegura que las mayúsculas consecutivas también se separen correctamente
    .replace(/^\w/, (c) => c.toUpperCase()) // Convierte la primera letra en mayúscula
}
export const sortByAttribute = (
  array: Record<string, any>[],
  attribute: string,
  order: Order = Order.ASC
): Record<string, any>[] => {
  return array.sort((a, b) => {
    const aValue = a[attribute]
    const bValue = b[attribute]
    if (typeof aValue === 'string' && typeof bValue === 'string') {
      const comparison = aValue.localeCompare(bValue)
      return order === Order.ASC ? comparison : -comparison
    } else if (typeof aValue === 'number' && typeof bValue === 'number') {
      const comparison = aValue - bValue
      return order === Order.ASC ? comparison : -comparison
    }
    return 0
  })
}
export const getKeys = (data: any[], selectedKeys?: string[]): string[] => {
  if (selectedKeys) {
    return Object.keys(data[0]).filter((key) => selectedKeys.includes(key))
  }
  return Object.keys(data[0])
}
export const generateReport = (
  dataReport: any[],
  selectedKeys: string[],
  sortAttribute: string,
  sortOrder: Order
): void => {
  // Registrar las fuentes
  pdfMake.vfs = pdfFonts.pdfMake.vfs
  const logo: Content = {
    image: flagLogo,
    width: 50
  }
  const dataSorted = sortByAttribute(dataReport, sortAttribute, sortOrder)
  const headers = getKeys(dataReport, selectedKeys)
  const tableBody = [
    headers,
    ...dataSorted.map((item) => headers.map((header) => String(item[header])))
  ]
  const docDefinition: TDocumentDefinitions = {
    pageOrientation: headers.length > 6 ? 'landscape' : 'portrait',
    pageSize: 'A4',
    pageMargins: [10, 10],
    header: {
      text: 'CSC',
      alignment: 'right',
      margin: [10, 10]
    },
    content: [
      logo,
      { text: 'Junta Administradora de Agua Potable y Saneamiento', style: 'h1' },
      {
        columns: [
          // Columna 1: Direccion de la empresa
          {
            text: [
              { text: 'Comunidad Santo Domingo 1\n', style: 'h3' },
              'Cayambe - Ayora \nRuc:1792005345001\n',
              { link: 'https://devtalles.com', text: 'santoDomingouno@gmail.com' }
            ]
          },
          // Columna 2: Datos del documento
          {
            text: [
              { text: 'Reporte de Socios\n', style: 'h3' },
              'Emisión:2021-09-01\nExpiración:NA'
            ],
            alignment: 'right'
          }
        ]
      },
      // Código QR con la dirección
      {
        qr: 'https://devtalles.com',
        fit: 100,
        alignment: 'right'
      },
      // Datos del cliente
      {
        text: [
          { text: 'Cobrar a:\n', style: 'h2' },
          'John Doe\nRazón social: John Doe Cop.\nBN: 123456789'
        ]
      },
      {
        layout: 'lightHorizontalLines',
        style: 'tableExample',
        table: { headerRows: 1, widths: 'auto', body: tableBody }
      }
    ],
    footer: {
      text: 'Generated by CSC',
      alignment: 'right'
    },
    styles: styles
  }
  const pdfDoc = pdfMake.createPdf(docDefinition)
  pdfDoc.download('table.pdf')
}
export const convertToCSV = (
  dataReport: any[],
  selectedKeys: string[],
  sortAttribute: string,
  sortOrder: Order
): string => {
  // if (data.length === 0) return ''
  const dataSorted = sortByAttribute(dataReport, sortAttribute, sortOrder)
  const headers = getKeys(dataReport, selectedKeys)
  const csvRows = [
    headers.join(','), // Encabezados
    ...dataSorted.map((row) => headers.map((header) => JSON.stringify(row[header] || '')).join(','))
  ]
  return csvRows.join('\n')
}
export const downloadCSV = (csv: string, filename: string): void => {
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })
  const link = document.createElement('a')

  if (link.download !== undefined) {
    // Detectar si el navegador soporta la descarga
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', filename)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
}
